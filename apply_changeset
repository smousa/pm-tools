#!/usr/bin/env python

import yaml
import optparse
import os
import subprocess
import re
from clint.textui import puts, indent
from clint.textui.colored import red, green, yellow, white
from jira.client import JIRA


def run(cmd):
    puts(white("Running command: ") + cmd)
    try:
        output = subprocess.check_output(cmd.split(' '), stderr=subprocess.STDOUT)
    except Exception:
        with indent(4):
            puts(red("Error running command: ") + cmd)
        raise
    return output


def yn(prompt):
    keep_going = raw_input(prompt).strip()
    if keep_going.lower() in ('y', 'yes'):
        keep_going = True
    else:
        keep_going = False

    if not keep_going:
        raise Exception("Bailing.")


def main(repo, jira, changeset):
    # find changeset number
    changeset_number = re.sub('\D', '', changeset)
    puts(white("Working on changeset: ") + changeset_number)

    # find JIRA issue
    _cmd = 'svn log -c %s http://dev.zenoss.com/svnint' % changeset_number
    svn_log = run(_cmd)
    puts(white("Subversion commit message:"))
    with indent(4):
        puts(svn_log)
    issue_try = re.search('.*(?P<issue>ZEN-[0-9]*).*', svn_log)

    try:
        issue = issue_try.group('issue')
        puts(green("Found Issue: ") + issue)
    except Exception:
        puts(yellow("Could not find issue."))
        issue = raw_input('Issue: ').strip()
    puts(white('Using Issue: ' + issue))

    # create commit message
    commit_body = svn_log.split("\n")[3]
    puts(white("Using commit body of:"))
    with indent(4):
        puts(commit_body)

    yn('Continue? ')

    # create new branch for issue
    _branch_cmd = "git --git-dir=%s/.git checkout -b %s" % (repo, issue)
    puts(white("Creating branch."))
    run(_branch_cmd)

    # apply changeset to repo
    changeset_path = os.path.realpath(changeset)
    _patch_cmd = "patch --directory=%s -p0 -i %s" % (os.path.join(repo, 'src', 'core'), changeset_path)
    puts(white("Patching repository with changeset: ") + changeset)
    run(_patch_cmd)

    # review and commit
    _status_cmd = "git --git-dir=%s/.git status"
    run(_status_cmd)

    yn("Commit and push changes to origin? ")
    puts(red("Not committing yet."))


def find_jira(config_file):
    jira_config = {}
    with open(config_file) as jira_conf:
        jira_config = yaml.load(jira_conf)
    options = {
        'server': jira_config['jira_server'],
        'rest_api_version': jira_config['jira_api_version']
    }
    basic_auth = (jira_config['jira_user'], jira_config['jira_password'])
    jira = JIRA(options, basic_auth)
    return jira


if __name__ == '__main__':
    print "Usage: %s repo_dir jira_conf_file changeset_file" % __file__

    parser = optparse.OptionParser()
    (options, args) = parser.parse_args()
    working_dir = args[0]
    jira_config = args[1]
    changeset_file = args[2]

    jira = find_jira(jira_config)

    if not os.path.isdir(working_dir):
        raise Exception("Could not locate repository working directory: %s" % working_dir)

    if not os.path.isfile(changeset_file):
        raise Exception("Could not locate changeset file: %s" % changeset_file)

    main(working_dir, jira, changeset_file)
