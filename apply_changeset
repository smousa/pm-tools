#!/usr/bin/env python

import yaml
import optparse
import os
import subprocess
import re
from jira.client import JIRA


def run(*cmd):
    print " ".join(cmd)
    try:
        output = subprocess.check_output(cmd, stderr=subprocess.STDOUT)
    except Exception:
        print "Error running command: %r" % cmd
        raise
    return output


def main(repo, jira, changeset):
    # find changeset number
    changeset_number = re.sub('\D', '', changeset)
    print 'Working on changeset: %s' % changeset_number

    # find JIRA issue
    _cmd = 'svn log -c %s http://dev.zenoss.com/svnint' % changeset_number
    svn_log = run(_cmd.split(' '))
    print 'Subversion commit message:'
    print svn_log
    issue_try = re.search('.*(?P<issue>ZEN-[0-9]*).*', svn_log)
    issue = issue_try.group('issue')
    print 'Found issue: %s' % issue

    # create commit message
    # create new branch for issue
    # apply changeset to repo
    # review and commit
    pass


def find_jira(config_file):
    jira_config = {}
    with open(config_file) as jira_conf:
        jira_config = yaml.load(jira_conf)
    options = {
        'server': jira_config['jira_server'],
        'rest_api_version': jira_config['jira_api_version']
    }
    basic_auth = (jira_config['jira_user'], jira_config['jira_password'])
    jira = JIRA(options, basic_auth)
    return jira


if __name__ == '__main__':
    print "Usage: %s repo_dir jira_conf_file changeset_file" % __file__

    parser = optparse.OptionParser()
    (options, args) = parser.parse_args()
    working_dir = args[0]
    jira_config = args[1]
    changeset_file = args[2]

    jira = find_jira(jira_config)

    if not os.path.isdir(working_dir):
        raise Exception("Could not locate repository working directory: %s" % working_dir)

    if not os.path.isfile(changeset_file):
        raise Exception("Could not locate changeset file: %s" % changeset_file)

    main(working_dir, jira, changeset_file)
